shell's version
Project 1a
Due Date: Mon 1 Oct

Pair Project

Objectives

Familiarity with
event-driven program execution
state dependence in application
Model-View-Controller architecture
Android framework
Description

In this project, you will implement a very simple timer as an Android application.
Functional Requirements (55%)

The timer has the following controls:
One two-digit display of the form 88.
One multi-function button.
The timer behaves as follows:
The timer always displays the remaining time.
Initially, the timer is stopped and the (remaining) time is zero.
If the button is pressed when the timer is stopped, the time is incremented by one up to a preset maximum of 99. (The button acts as an increment button.)
If the time is greater than zero and three seconds elapse from the most recent time the button was pressed, then the timer beeps once and starts running.
While running, the timer subtracts one from the time for every second that elapses.
If the timer is running and the button is pressed, the timer stops and the time is reset to zero. (The button acts as a cancel button.)
If the timer is running and the time reaches zero by itself (without the button being pressed), then the timer stops and the alarm starts beeping indefinitely two times a second.
If the alarm is sounding and the button is pressed, the alarm stops sounding; the timer is now stopped and the (remaining) time is zero. (The button acts as a stop button.)
Nonfunctional Requirements (30%)

Ensure your application is testable.
Ensure your application includes comprehensive unit and integration tests. (See also here.)
Follow the design principles discussed so far.
Maintain a clear, responsibility-based separation among the different building blocks (Android does not map directly to MVC, but see here).
Generally follow good Android development practice.
Use this Timer class.
Use sound notifications for beeping.
Documentation (15%)

Use inline comments to document design details in the code.
Use javadoc comments to document how to use the abstractions (interfaces, classes) you designed.
Provide a brief (2-300 words) description of your pair development journey during this project. Focus on aspects you find noteworthy, e.g., process, pairing, testing, design decisions, refactoring, use of the repository. 
Submission

Verify that your repository is named cs313f12p1a.
Share your repository with the instructor (laufer) and the TA (ejburns) through admin > access management. Notification will occur automatically.
You should already have been using your repository to collaborate. There should be exactly one repository per pair.
When your project is ready for evaluation, send the instructor and the TA a brief email notification.
Grading Criteria

TBD... 